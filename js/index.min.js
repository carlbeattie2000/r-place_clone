(function () {
  'use strict';

  var shared_state = {
    selectedColor: "#000",
    ctx: null,
    canvas: null,
    zoomContainer: null,
    max_span_x: 200,
    max_span_y: 200,
    min_span_x: -200,
    min_span_y: -200,
    current_span_x: 0,
    current_span_y: 0,
    span_container: document.getElementById("zoom_container"),
    canvas: document.getElementById("canvas"),
    coordinates_display: document.getElementById("coordinates_display"),
    color_selector_container: document.getElementById("color_selector_container"),
    color_selector_box: document.getElementById("color_selector_box"),

    setSelectedColor(color) {

      this.selectedColor = color;

    },

    setCtx(ctx) {

      this.ctx = ctx;

    },

    setCanvas(canvas) {

      this.canvas = canvas;

    },

    setZoomContainer(container) {

      this.zoomContainer = container;

    },

    setMaxSpanX(span) {this.max_span_x = span;},
    setMaxSpanY(span) {this.max_span_y = span;},
    setMinSpanX(span) {this.min_span_x = span;},
    setMinSpanY(span) {this.min_span_y = span;},
    setCurrentSpanX(span) {this.current_span_x = span;},
    setCurrentSpanY(span) {this.current_span_y = span;},

    updateSpanContainer() {
      this.span_container.style.transform = `translate(${this.current_span_x}px, ${this.current_span_y}px)`;
    }
  };

  var config = {
    DEFAULT_COLOR_PALLET: [
      "#6d001a",
      "#be0039",
      "#ff4500",
      "#ffa800",
      "#ffd635",
      "#fff8b8",
      "#00a368",
      "#00cc78",
      "#7eed56",
      "#00756f",
      "#009eaa",
      "#00ccc0",
      "#2450a4",
      "#3690ea",
      "#51e9f4",
      "#493ac1",
      "#6a5cff",
      "#94b3ff",
      "#811e9f",
      "#b44ac0",
      "#e4abff",
      "#de107f",
      "#ff3881",
      "#ff99aa",
      "#6d482f",
      "#9c6926",
      "#ffb470",
      "#000000",
      "#515252",
      "#898d90",
      "#d4d7d9",
      "#ffffff",
    ],
    canvas_width: 1000,
    canvas_height: 1000,
    CANVAS_ZOOM_LEVELS: {
      0: 0.2,
      1: 0.6,
      2: 1,
      3: 1.5,
      4: 2,
      5: 3,
      6: 5,
      7: 10,
      8: 15,
      9: 20,
      10: 30,
      11: 40,
      12: 50,
      13: 70,
      14: 100,
    },
    env_mode: "static"
  };

  class Canvas {
    constructor(canvas, width, height) {

      this.canvas = canvas;
      this.width = width;
      this.height = height;

    }

    init() {

      this.canvas.height = this.height;
      this.canvas.width = this.width;
      this.canvas.style.backgroundColor = "#fff";

      shared_state.setCtx(this.canvas.getContext("2d"));
      shared_state.setCanvas(this.canvas);

    }
  }

  const main$3 = new Canvas(shared_state.canvas, config.canvas_width, config.canvas_height);

  main$3.init();

  function getLastKeyInObject(object) {
    const keys = Object.keys(object);

    return keys[keys.length - 1];
  }

  class CanvasZoom {

    constructor(canvas, zoom_container, zoomLevels) {

      this.canvas = canvas;
      this.zoom_container = zoom_container;
      this.zoomLevels = zoomLevels;

      this.currentZoomLevel = 0;
      this.maxZoomLevel = getLastKeyInObject(this.zoomLevels);

    }

    init() {

      this.scrollEvent();

    }

    scrollEvent() {

      this.zoom_container.addEventListener("wheel", (e) => {
        e.preventDefault();

        if (e.deltaY < 0) {
          // Zoom in
          this.zoom("in");
        }
        else if (e.deltaY > 0) {
          // Zoom out
          this.zoom("out");
        }
      });

    }

    zoom(direction) {

      switch (direction) {

        case "in":
          this.currentZoomLevel = this.currentZoomLevel + 1 > this.maxZoomLevel ? this.maxZoomLevel : this.currentZoomLevel + 1;
          break
        case "out":
          this.currentZoomLevel = this.currentZoomLevel - 1 < 0 ? 0 : this.currentZoomLevel - 1;
          break

      }

      this.updateCanvasScale(this.zoomLevels[this.currentZoomLevel]);

      this.updateMaxMinSpan();
      this.updateCurrentSpan();

    }

    updateCanvasScale(scale) {

      const scaleText = `scale(${scale})`;

      this.canvas.style.transform = scaleText;

    }

    updateMaxMinSpan() {

      const newSpanValue = (this.canvas.width * this.zoomLevels[this.currentZoomLevel]) / 2;

      shared_state.setMaxSpanX(newSpanValue);
      shared_state.setMaxSpanY(newSpanValue);

      shared_state.setMinSpanX(-newSpanValue);
      shared_state.setMinSpanY(-newSpanValue);

    }

    updateCurrentSpan() {

      let currentSpanX = shared_state.current_span_x;
      let currentSpanY = shared_state.current_span_y;

      shared_state.setCurrentSpanX(currentSpanX > shared_state.max_span_x ? shared_state.max_span_x : currentSpanX < shared_state.min_span_x ? 0 : currentSpanX);

      shared_state.setCurrentSpanY(currentSpanY > shared_state.max_span_y ? shared_state.max_span_y : currentSpanY < shared_state.min_span_y ? 0 : currentSpanY);

      shared_state.updateSpanContainer();

    }

  }

  var zoom = new CanvasZoom(shared_state.canvas, shared_state.span_container, config.CANVAS_ZOOM_LEVELS);

  class Coordinates {

    constructor(canvas, coordinates_display) {

      this.canvas = canvas;
      this.coordinates_display = coordinates_display;

    }

    init() {

      this.getCoordinatesOnMouseOverCanvas();

    }


    getCursorCoordinates(e) {

      const rect = this.canvas.getBoundingClientRect();

      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;

      return {
        x: (e.clientX - rect.left) * scaleX,
        y: (e.clientY - rect.top) * scaleY
      }

    }

    updateCoordinatesDisplay(x, y) {

      x = Math.floor(x);
      y = Math.floor(y);

      this.coordinates_display.querySelector("p").textContent = `(${x}, ${y})`;

    }

    getCoordinatesOnMouseOverCanvas() {

      this.canvas.addEventListener("mousemove", (e) => {

        const { x, y } = this.getCursorCoordinates(e);

        this.updateCoordinatesDisplay(x, y);

      });

    }

  }

  const main$2 = new Coordinates(shared_state.canvas, shared_state.coordinates_display);

  main$2.init();

  class Camera {

    constructor() {



    }

    init() {

      this.keyboardMovement();

    }

    keyboardMovement() {

      document.body.addEventListener("keydown", (e) => {

        const key = e.key
          .replace("ArrowUp", "up")
          .replace("ArrowRight", "right")
          .replace("ArrowDown", "down")
          .replace("ArrowLeft", "left");

        const current_x = shared_state.current_span_x;
        const current_y = shared_state.current_span_y;
        
        switch(key) {
          
          case "up":
            shared_state.setCurrentSpanY(
              current_y + 50 > shared_state.max_span_y ? shared_state.max_span_y :
              current_y + 50
            );
            break
          case "right":
            shared_state.setCurrentSpanX(
              current_x + 50 > shared_state.max_span_x ? shared_state.max_span_x :
              current_x + 50
            );
            break
          case "down":
            shared_state.setCurrentSpanY(
              current_y - 50 < shared_state.min_span_y ? shared_state.min_span_y :
              current_y - 50
            );
            break
          case "left":
            shared_state.setCurrentSpanX(
              current_x - 50 < shared_state.min_span_x ? shared_state.min_span_x :
              current_x - 50
            );
            break

        }

        shared_state.updateSpanContainer();

      });

    }

  }

  var camera = new Camera();

  class ColorMenu {

    constructor(color_selector_container, color_selector_box, colors) {

      this.color_selector_container = color_selector_container;
      this.color_selector_box = color_selector_box;
      this.colors = colors;

      this.toggle_state = false;

    }

    init() {

      this.addButtonEvents();
      this.loadColors();

    }

    toggleContainer() {

      if (!this.toggle_state) {

        this.color_selector_container.style.top = "70%";

        this.toggle_state = true;

        return

      }

      this.color_selector_container.style.top = "110%";

      this.toggle_state = false;

      return

    }

    addButtonEvents() {

      const openBtn = document.getElementById("open_color_selector");

      openBtn.addEventListener("click", () => {
        this.toggleContainer();
      });

      const closeBtn = document.getElementById("close_color_selector");

      closeBtn.addEventListener("click", () => {
        this.toggleContainer();
      });

    }

    loadColors() {

      shared_state.setSelectedColor("transparent");
    
      for (let color of config.DEFAULT_COLOR_PALLET) {
        const colorDiv = document.createElement("div");
    
        colorDiv.style.background = color;
        colorDiv.style.height = "50px";
        colorDiv.style.width = "50px";
    
        this.color_selector_box.append(colorDiv);
    
        colorDiv.addEventListener("click", () => {
          shared_state.setSelectedColor(color);
    
          this.toggleContainer();
        });
      }

    }

  }

  var color_selector = new ColorMenu(shared_state.color_selector_container, shared_state.color_selector_box, config.DEFAULT_COLOR_PALLET);

  // TODO

  class Storage {
    
    constructor(env_mode) {

      this.env_mode = env_mode;

    }

    init() {



    }


    loadDataFromLocalStorage() {

      const pixelsCords = JSON.parse(localStorage.getItem("pixels")) || [];

      return pixelsCords;

    }

    saveDataToLocalStorage(newData) {

      let pixelsArray = this.loadDataFromLocalStorage();

      pixelsArray = pixelsArray.filter((data) => {
        if (Math.floor(data.x) != Math.floor(newData.x) || Math.floor(data.y) != Math.floor(newData.y)) {
          return data
        }
      });

      pixelsArray = [...pixelsArray, newData];

      localStorage.setItem("pixels", JSON.stringify(pixelsArray));

    }

  }

  const main$1 = new Storage(config.env_mode);

  class Draw {

    constructor(canvas) {

      this.canvas = canvas;

    }

    init() {

      this.drawEvent();

      const loadedData = main$1.loadDataFromLocalStorage();

      console.log(loadedData);

      this.drawWholeBoard(loadedData);

    }

    drawEvent() {

      this.canvas.addEventListener("mousedown", (e) => {

        const {x, y} = main$2.getCursorCoordinates(e);

        this.drawRect(x, y, shared_state.selectedColor);

        main$1.saveDataToLocalStorage({x, y, color: shared_state.selectedColor});

      });

    }

    drawRect(x, y, color) {

      const ctx = shared_state.ctx;

      console.log(this.canvas);
      
      y = Math.floor(y);
      x = Math.floor(x);

      ctx.fillStyle = color;
      ctx.fillRect(x, y, 1, 1);

    }

    drawWholeBoard(pixels) {

      for (let pixel of pixels) {

        this.drawRect(pixel.x, pixel.y, pixel.color);

      }

    }

  }

  const main = new Draw(shared_state.canvas);

  main.init();

  zoom.init();
  main$2.init();
  camera.init();
  color_selector.init();

})();
